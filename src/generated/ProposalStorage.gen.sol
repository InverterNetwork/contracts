// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

// THIS FILE IS AUTOGENERATED.
// The import statements may not have accurate paths. Please edit accordingly.

import {IERC20MetadataUpgradeable} from "@oz-up/interfaces/IERC20MetadataUpgradeable.sol";
import {IERC20} from "@oz/interfaces/IERC20.sol";

import {IContributorManager} from "src/proposal/base/IContributorManager.sol";
import {IAuthorizer} from "src/modules/IAuthorizer.sol";
import {IPaymentProcessor} from "src/modules/IPaymentProcessor.sol";

contract ProposalStorage {
    uint8 internal __Proposal__initialized;
    bool internal __Proposal__initializing;
    uint256[50] internal __Proposal___gap;
    mapping(address => uint256) internal __Proposal__balances;
    mapping(address => mapping(address => uint256)) internal __Proposal__allowances;
    uint256 internal __Proposal__totalSupply;
    string internal __Proposal__name;
    string internal __Proposal__symbol;
    uint256[45] internal __Proposal___gap_2;
    address internal __Proposal__owner;
    uint256[49] internal __Proposal___gap_3;
    mapping(address => address) internal __Proposal__modules;
    uint256 internal __Proposal__moduleCounter;
    mapping(address => mapping(bytes32 => mapping(address => bool))) internal __Proposal__moduleRoles;
    mapping(address => IContributorManager.Contributor) internal __Proposal__contributorRegistry;
    mapping(address => address) internal __Proposal__contributors;
    uint256 internal __Proposal__contributorCounter;
    IERC20MetadataUpgradeable internal __Proposal__asset;
    uint256[49] internal __Proposal___gap_4;
    uint256 internal __Proposal_proposalId;
    IERC20 internal __Proposal_token;
    IAuthorizer internal __Proposal_authorizer;
    IPaymentProcessor internal __Proposal_paymentProcessor;
}
